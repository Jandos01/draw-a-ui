/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { ServiceHistoryService } from "../serviceHistory.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { ServiceHistoryCreateInput } from "./ServiceHistoryCreateInput";
import { ServiceHistory } from "./ServiceHistory";
import { ServiceHistoryFindManyArgs } from "./ServiceHistoryFindManyArgs";
import { ServiceHistoryWhereUniqueInput } from "./ServiceHistoryWhereUniqueInput";
import { ServiceHistoryUpdateInput } from "./ServiceHistoryUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class ServiceHistoryControllerBase {
  constructor(
    protected readonly service: ServiceHistoryService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ServiceHistory })
  @nestAccessControl.UseRoles({
    resource: "ServiceHistory",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createServiceHistory(
    @common.Body() data: ServiceHistoryCreateInput
  ): Promise<ServiceHistory> {
    return await this.service.createServiceHistory({
      data: {
        ...data,

        car: data.car
          ? {
              connect: data.car,
            }
          : undefined,
      },
      select: {
        car: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        description: true,
        id: true,
        serviceDate: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [ServiceHistory] })
  @ApiNestedQuery(ServiceHistoryFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "ServiceHistory",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async serviceHistories(
    @common.Req() request: Request
  ): Promise<ServiceHistory[]> {
    const args = plainToClass(ServiceHistoryFindManyArgs, request.query);
    return this.service.serviceHistories({
      ...args,
      select: {
        car: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        description: true,
        id: true,
        serviceDate: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ServiceHistory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "ServiceHistory",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async serviceHistory(
    @common.Param() params: ServiceHistoryWhereUniqueInput
  ): Promise<ServiceHistory | null> {
    const result = await this.service.serviceHistory({
      where: params,
      select: {
        car: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        description: true,
        id: true,
        serviceDate: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ServiceHistory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "ServiceHistory",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateServiceHistory(
    @common.Param() params: ServiceHistoryWhereUniqueInput,
    @common.Body() data: ServiceHistoryUpdateInput
  ): Promise<ServiceHistory | null> {
    try {
      return await this.service.updateServiceHistory({
        where: params,
        data: {
          ...data,

          car: data.car
            ? {
                connect: data.car,
              }
            : undefined,
        },
        select: {
          car: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          description: true,
          id: true,
          serviceDate: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ServiceHistory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "ServiceHistory",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteServiceHistory(
    @common.Param() params: ServiceHistoryWhereUniqueInput
  ): Promise<ServiceHistory | null> {
    try {
      return await this.service.deleteServiceHistory({
        where: params,
        select: {
          car: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          description: true,
          id: true,
          serviceDate: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
