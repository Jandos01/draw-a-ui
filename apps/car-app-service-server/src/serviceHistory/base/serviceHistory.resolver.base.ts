/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { ServiceHistory } from "./ServiceHistory";
import { ServiceHistoryCountArgs } from "./ServiceHistoryCountArgs";
import { ServiceHistoryFindManyArgs } from "./ServiceHistoryFindManyArgs";
import { ServiceHistoryFindUniqueArgs } from "./ServiceHistoryFindUniqueArgs";
import { CreateServiceHistoryArgs } from "./CreateServiceHistoryArgs";
import { UpdateServiceHistoryArgs } from "./UpdateServiceHistoryArgs";
import { DeleteServiceHistoryArgs } from "./DeleteServiceHistoryArgs";
import { Car } from "../../car/base/Car";
import { ServiceHistoryService } from "../serviceHistory.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ServiceHistory)
export class ServiceHistoryResolverBase {
  constructor(
    protected readonly service: ServiceHistoryService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ServiceHistory",
    action: "read",
    possession: "any",
  })
  async _serviceHistoriesMeta(
    @graphql.Args() args: ServiceHistoryCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ServiceHistory])
  @nestAccessControl.UseRoles({
    resource: "ServiceHistory",
    action: "read",
    possession: "any",
  })
  async serviceHistories(
    @graphql.Args() args: ServiceHistoryFindManyArgs
  ): Promise<ServiceHistory[]> {
    return this.service.serviceHistories(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ServiceHistory, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ServiceHistory",
    action: "read",
    possession: "own",
  })
  async serviceHistory(
    @graphql.Args() args: ServiceHistoryFindUniqueArgs
  ): Promise<ServiceHistory | null> {
    const result = await this.service.serviceHistory(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ServiceHistory)
  @nestAccessControl.UseRoles({
    resource: "ServiceHistory",
    action: "create",
    possession: "any",
  })
  async createServiceHistory(
    @graphql.Args() args: CreateServiceHistoryArgs
  ): Promise<ServiceHistory> {
    return await this.service.createServiceHistory({
      ...args,
      data: {
        ...args.data,

        car: args.data.car
          ? {
              connect: args.data.car,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ServiceHistory)
  @nestAccessControl.UseRoles({
    resource: "ServiceHistory",
    action: "update",
    possession: "any",
  })
  async updateServiceHistory(
    @graphql.Args() args: UpdateServiceHistoryArgs
  ): Promise<ServiceHistory | null> {
    try {
      return await this.service.updateServiceHistory({
        ...args,
        data: {
          ...args.data,

          car: args.data.car
            ? {
                connect: args.data.car,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ServiceHistory)
  @nestAccessControl.UseRoles({
    resource: "ServiceHistory",
    action: "delete",
    possession: "any",
  })
  async deleteServiceHistory(
    @graphql.Args() args: DeleteServiceHistoryArgs
  ): Promise<ServiceHistory | null> {
    try {
      return await this.service.deleteServiceHistory(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Car, {
    nullable: true,
    name: "car",
  })
  @nestAccessControl.UseRoles({
    resource: "Car",
    action: "read",
    possession: "any",
  })
  async getCar(@graphql.Parent() parent: ServiceHistory): Promise<Car | null> {
    const result = await this.service.getCar(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
